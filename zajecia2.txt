'''kwadrat = lambda x: x*x

print kwadrat(2)

def generator(n):
  while n:
    print 'Generator start %d' % n
    yield n
    print 'Generator stop %d' % n
    n -= 1
    
for x in generator(5):
  print 'Wywolanie %d' % x
''' 

#ZADANIE 1
'''
def fun(sentence):
  return [(word, len(word)) for word in sentence.split()]
  
  
print fun('ala ma kota')
'''

#ZADANIE 2 - do domu
'''
def fun(n):
  container = [1,1]
  print container
  return [container.append(container[x-1]+container[x-2]) for x in range (2, n)]
  
print (2,10)
print fun(10)
'''

#ZADANIE 2 - generator liczb ciagu fibonaciego
'''
def fib_gen():
  p = 0 
  n = 1
  yield p
  yield n
  while True:
    t = p + n 
    p = n
    n = t
    yield n 

f = fib_gen()
print f.next()
print f.next()
print f.next()
print f.next()
print f.next()
print f.next()
print f.next()
print f.next()
print f.next()
print f.next()
print f.next()
print f.next()
'''

#ZADANIE 3 - generowanie liczb pierwszych
'''
def pierwsze(n):
  return [i for i in range(2,n+1) if len([t for t in range (1,i+1) if i%t == 0]) == 2]

print pierwsze(10)
'''

#ZADANIE 4
'''
def fun(innerFunction, innerList):
  return innerFunction(innerList)

def fun2(innerFunction, innerList):
  return [(x) for x in innerList if innerFunction(x)]
  
def sampleInnerFunction(lyst):
  return [(x) for x in lyst if x % 3 == 0]
  
def sampleInnerFunction2(lyst):
  return [(x) for x in lyst if x % 2 == 0]

def sampleInnerFunction3(x):
  return x % 2 == 0
  
print fun(sampleInnerFunction,range(10))
print fun(sampleInnerFunction2,range(10))
print fun2(sampleInnerFunction3, range(10))
'''

#ZADANIE 4
'''DOKONCZYC
from math import sqrt
def fun(firstArg, secondArg):
  ret = [(getDistance(x, secondArg), x) for x in firstArg]
  print ret
  return ret.sort(key=lambda x: x[0])

def getDistance(fPoint, sPoint):
  return sqrt(pow(sPoint[0]-fPoint[0],2)+pow(sPoint[1]-fPoint[1],2))

points = [(1,2),(6,8),(5,2)]
point = (1,5)
print fun(points, point)
'''

#ZADANIE 5
import os


def gen(extension, path):
  return [x for x in os.listdir(path) if extension in x]

extension = raw_input('Extension: ');
path = raw_input('Path: ');

print gen(extension, path)


























